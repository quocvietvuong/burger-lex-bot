AWSTemplateFormatVersion: '2010-09-09'
Description: Amazon Lex with Lambda validation, DynamoDB storage, CloudWatch logs, and S3 archiving
Resources:
# --- Amazon Lex Bot ---
  LexChatBot:
    Type: AWS::Lex::Bot
    Properties:
      Name: BurgerBuddyBot
      Description: "A bot that supports customers buying burgers"
      RoleArn: !GetAtt LexExecutionRole.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      BotLocales:
        - LocaleId: en_US
          NluConfidenceThreshold: 0.4
          SlotTypes:
            - Name: BurgerType
              Description: "Types of burgers"
              SlotTypeValues:
                - SampleValue: { Value: "bacon" }
                - SampleValue: { Value: "cheese" }
                - SampleValue: { Value: "chilli" }
                - SampleValue: { Value: "fried egg" }
                - SampleValue: { Value: "fried green tomatoes" }
                - SampleValue: { Value: "fried pickle" }
                - SampleValue: { Value: "jalapeno" }
              ValueSelectionSetting: # <-- REQUIRED FOR LEX V2
                ResolutionStrategy: ORIGINAL_VALUE  # or "TOP_RESOLUTION"
            - Name: BurgerSize
              Description: "Burger sizes"
              SlotTypeValues:
                - SampleValue: { Value: "single" }
                - SampleValue: { Value: "double" }
                - SampleValue: { Value: "triple" }
              ValueSelectionSetting:  # <-- REQUIRED FOR LEX V2
                ResolutionStrategy: ORIGINAL_VALUE  # or "TOP_RESOLUTION"
            - Name: BurgerFranchise
              Description: "Burger franchise"
              SlotTypeValues:
                - SampleValue: { Value: "Best Burger" }
                - SampleValue: { Value: "Burger Palace" }
                - SampleValue: { Value: "Flaming Burger" }
              ValueSelectionSetting:  # <-- REQUIRED FOR LEX V2
                ResolutionStrategy: ORIGINAL_VALUE  # or "TOP_RESOLUTION"
          Intents:
            - Name: OrderBurger
              Description: "Handle Burger Orders"
              DialogCodeHook:
                Enabled: true
              SampleUtterances:
                - Utterance: "I'd like to order a burger"
                - Utterance: "I'd like to order a {BurgerType}"
                - Utterance: "I'd like to order a {BurgerSize} {BurgerType}"
                - Utterance: "I'd like to order a {BurgerSize} {BurgerType} from {BurgerFranchise}"
              Slots:
                - Name: BurgerType
                  SlotTypeName: BurgerType
                  Description: "Type of burger being ordered"
                  ValueElicitationSetting:
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "What type of burger would you like? (ex: cheese, fried egg or jalapeno)?"
                      MaxRetries: 2
                    SlotConstraint: Required
                - Name: BurgerSize
                  SlotTypeName: BurgerSize
                  Description: "Size of burger being ordered"
                  ValueElicitationSetting:
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "What size burger would you like (single, double or triple patty)?"
                      MaxRetries: 2
                    SlotConstraint: Required
                - Name: BurgerFranchise
                  SlotTypeName: BurgerFranchise
                  Description: "Franchise for the order"
                  ValueElicitationSetting:
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Where would you like to order from (Best Burger, Burger Palace, Flaming Burger)?"
                      MaxRetries: 2
                    SlotConstraint: Required
              # confirmation prompt
              IntentConfirmationSetting:
                PromptSpecification:
                  MaxRetries: 2
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Would you like me to order your {BurgerSize} {BurgerType} from {BurgerFranchise}?"
                DeclinationResponse:
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Stay hungry, my friend."
              FulfillmentCodeHook:
                Enabled: true
                IsActive: true
                PostFulfillmentStatusSpecification:
                  SuccessResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "I've ordered your {BurgerSize} {BurgerType} from {BurgerFranchise}."
                  FailureResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Oops. Something went wrong. Please try again."
                  TimeoutResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Still working on your order..."
            - Name: FallbackIntent
              Description: "Handles unrecognized inputs"
              ParentIntentSignature: "AMAZON.FallbackIntent"
  LexExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lexv2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LexPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['lambda:InvokeFunction']
                Resource: !GetAtt LexValidatorLambda.Arn
  LexValidatorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LexValidator
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: validate-lambda-code-orderburgerbot-bucket
        S3Key: order_burger_bot_validate_lambda.zip
      Environment:
        Variables:
          TABLE_NAME: !Ref ConversationLogsTable
  CloudWatchLogSaverLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CloudWatchLogSaver
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: validate-lambda-code-orderburgerbot-bucket
        S3Key: order_burger_bot_cloudwatch_log_save_lambda.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref LogBucket
  # S3 bucket for saving log
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: orderburgerbot-cloudwatch-log-saver-bucket
  LogSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt CloudWatchLogSaverLambda.Arn
      FilterPattern: ""
      LogGroupName: "/aws/lambda/LexValidator"

  # Permission for CloudWatch Logs to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CloudWatchLogSaverLambda
      Principal: "logs.amazonaws.com"
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/LexValidator:*"
  # --- DynamoDB Table for Conversation Logs ---
  ConversationLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConversationLogs
      AttributeDefinitions:
        - AttributeName: ConversationID
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: ConversationID
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ExpiryTime
        Enabled: true
  # --- IAM Roles ---
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - s3:PutObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"