AWSTemplateFormatVersion: '2010-09-09'
Description: Amazon Lex with Lambda validation, DynamoDB storage, CloudWatch logs, and S3 archiving

Resources:
  # --- Amazon Lex Bot ---
  LexChatBot:
    Type: AWS::Lex::Bot
    Properties:
      Name: BurgerBuddyBot
      Description: "A bot that supports customers buying burgers"
      RoleArn: !GetAtt LexExecutionRole.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      BotLocales:
        - LocaleId: en_US
          NluConfidenceThreshold: 0.4
          SlotTypes:
            - Name: BurgerType
              Description: "Types of burgers"
              SlotTypeValues:
                - SampleValue: { Value: "cheeseburger" }
                - SampleValue: { Value: "veggie" }
                - SampleValue: { Value: "jalapino" }
              ValueSelectionSetting:  # <-- REQUIRED FOR LEX V2
                ResolutionStrategy: ORIGINAL_VALUE  # or "TOP_RESOLUTION"
            - Name: BurgerSize
              Description: "Burger sizes"
              SlotTypeValues:
                - SampleValue: { Value: "small" }
                - SampleValue: { Value: "medium" }
                - SampleValue: { Value: "large" }
              ValueSelectionSetting:  # <-- REQUIRED FOR LEX V2
                ResolutionStrategy: ORIGINAL_VALUE  # or "TOP_RESOLUTION"
            - Name: BurgerFranchise
              Description: "Burger franchise"
              SlotTypeValues:
                - SampleValue: { Value: "BurgerKing" }
                - SampleValue: { Value: "McDonald" }
                - SampleValue: { Value: "JollyBee" }
              ValueSelectionSetting:  # <-- REQUIRED FOR LEX V2
                ResolutionStrategy: ORIGINAL_VALUE  # or "TOP_RESOLUTION"
          Intents:
            - Name: OrderBurger
              Description: "Handle Burger Orders"
              SampleUtterances:
                - Utterance: "I'd like to order a {BurgerType}"
                - Utterance: "I'd like to order a {BurgerSize} {BurgerType}"
                - Utterance: "I'd like to order a {BurgerSize} {BurgerType} from {BurgerFranchise}"
              Slots:
                - Name: BurgerType
                  SlotTypeName: BurgerType
                  Description: "Type of burger being ordered"
                  ValueElicitationSetting:
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "What type of burger would you like? We have cheeseburger, veggie, or bacon."
                      MaxRetries: 2
                    SlotConstraint: Required

                - Name: BurgerSize
                  SlotTypeName: BurgerSize
                  Description: "Size of burger being ordered"
                  ValueElicitationSetting:
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "What size? We have small, medium, or large."
                      MaxRetries: 2
                    SlotConstraint: Required

                - Name: BurgerFranchise
                  SlotTypeName: BurgerFranchise
                  Description: "Franchise for the order"
                  ValueElicitationSetting:
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Which franchise should we order from? McDonald's, Burger King, or Wendy's?"
                      MaxRetries: 2
                    SlotConstraint: Required
              FulfillmentCodeHook:
                Enabled: true
                PostFulfillmentStatusSpecification:
                  SuccessResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Your {BurgerSize} {BurgerType} from {BurgerFranchise} has been ordered! Anything else?"
                  TimeoutResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Still working on your order..."

            - Name: FallbackIntent
              Description: "Handles unrecognized inputs"
              ParentIntentSignature: "AMAZON.FallbackIntent"

  LexExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lexv2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LexPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['lambda:InvokeFunction']
                Resource: !GetAtt LexValidatorLambda.Arn

  LexValidatorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LexValidator
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('ConversationLogs')
          
          def lambda_handler(event, context):
              # Validate and persist to DynamoDB
              table.put_item(Item={
                  'ConversationID': event['sessionId'],
                  'UserInput': event['inputTranscript'],
                  'Timestamp': datetime.now().isoformat(),
                  'ExpiryTime': int(datetime.now().timestamp()) + 86400  # TTL: 1 day
              })
              
              # Log to CloudWatch
              print(json.dumps({
                  "sessionId": event['sessionId'],
                  "input": event['inputTranscript'],
                  "status": "Processed"
              }))
              
              return {
                  "dialogAction": {
                      "type": "Close",
                      "fulfillmentState": "Fulfilled",
                      "message": {
                          "contentType": "PlainText",
                          "content": "Your request has been recorded!"
                      }
                  }
              }
      Environment:
        Variables:
          TABLE_NAME: !Ref ConversationLogsTable

    # --- DynamoDB Table for Conversation Logs ---
  ConversationLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConversationLogs
      AttributeDefinitions:
        - AttributeName: ConversationID
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: ConversationID
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ExpiryTime
        Enabled: true
  
    # --- IAM Roles ---
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - s3:PutObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"